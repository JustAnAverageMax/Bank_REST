components:
  schemas:
    CardCreationRq:
      type: object
      properties:
        userId:
          type: integer
          nullable: false
          format: int64
          description: Unique identifier of user for card creation
        number:
          type: string
          description: Card number in format XXXX XXXX XXXX XXXX
          example: "1234 5678 9012 3456"
          x-field-extra-annotation: >-
            @Pattern(regexp = "^[0-9]{4} [0-9]{4} [0-9]{4} [0-9]{4}$", message = "Card number must be in format XXXX XXXX XXXX XXXX")
            @NotBlank(message = "Card number should not be blank")
      required:
        - userId
        - number

    AuthenticationRq:
      type: object
      properties:
        email:
          type: string
          description: User email used in registration
          example: 'example@gmail.com'
          x-field-extra-annotation: >-
            @Email(message = "Wrong email format. Should follow pattern: example@gmail.com")
            @NotBlank(message = "Email field should not be blank")
        password:
          type: string
          description: User password used in registration
          example: 'Password123'
          x-field-extra-annotation: >-
            @Size(min = 8, max = 32, message = "Password length should be between 8 and 32")
            @NotBlank(message = "Password should not be blank")
      required:
        - email
        - password

    AuthenticationRs:
      type: object
      description: Response containing access and refresh token for authenticated user
      properties:
        accessToken:
          type: string
          description: Access token for accessing user API functionality
        refreshToken:
          type: string
          description: Refresh token for refreshing access token
      required:
        - accessToken
        - refreshToken

    RegistrationRq:
      type: object
      properties:
        firstName:
          type: string
          description: User first name
          example: 'John'
          x-field-extra-annotation: >-
            @NotBlank(message = "First name should not be blank")
        lastName:
          type: string
          description: User last name
          example: 'Doe'
          x-field-extra-annotation: >-
            @NotBlank(message = "Last name should not be blank")
        email:
          type: string
          description: User email
          example: 'j.doe@gmail.com'
          x-field-extra-annotation: >-
            @Email(message = "Wrong email format. Should follow pattern: example@gmail.com")
            @NotBlank(message = "Email should not be blank")
        password:
          type: string
          description: User password
          example: 'Password123'
          x-field-extra-annotation: >-
            @Size(min = 8, max = 32, message = "Password length should be between 8 and 32")
            @NotBlank(message = "Password should not be blank")
      required:
        - firstName
        - lastName
        - email
        - password

    CardRs:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of the card
        number:
          type: string
          description: Masked card number
          example: '**** **** **** 1234'
        owner:
          type: string
          description: Full name of the card owner
          example: 'John Doe'
        expirationDate:
          type: string
          format: date
          description: Expiration date of the card in format YYYY-MM-DD
          example: '2025-01-01'
        status:
          $ref: '#/components/schemas/CardStatus'
        balance:
          type: number
          format: double
          description: Available balance on the card
          example: 1000.75
      required:
        - id
        - number
        - owner
        - expirationDate
        - status
        - balance

    UserRs:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier of user
        name:
          type: string
          description: User's name
        surname:
          type: string
          description: User's surname
        blocked:
          type: boolean
          description: Flag that represents user blockage
        registered_at:
          type: string
          format: date
          description: User registration date

    CardsPageRs:
      type: object
      allOf:
        - $ref: '#/components/schemas/PageRs'
      properties:
        content:
          type: array
          description: The list of cards on page
          items:
            $ref: '#/components/schemas/CardRs'
      required:
        - content

    UsersPageRs:
      type: object
      allOf:
        - $ref: '#/components/schemas/PageRs'
      properties:
        content:
          type: array
          description: The list of users on page
          items:
            $ref: '#/components/schemas/UserRs'
      required:
        - content

    CardStatus:
      type: string
      description: Status of the card
      enum:
        - ACTIVE
        - BLOCKED
        - EXPIRED

    PageRs:
      type: object
      description: Base page model
      properties:
        content:
          type: array
          description: The list of items on the current page
          items:
            type: object
            description: List item
        totalElements:
          type: integer
          format: int64
          description: Total amount of elements
        totalPages:
          type: integer
          description: Total amount of pages
        page:
          type: integer
          description: Current page (starts with 0)
        size:
          type: integer
          description: Amount of elements per page
        elementsAmount:
          type: integer
          description: Amount of elements on page
        first:
          type: boolean
          description: Flag that indicates if this is the first page
        last:
          type: boolean
          description: Flag that indicates if this is the last page
        empty:
          type: boolean
          description: Flag that indicates if this page is empty
      required:
        - content
        - totalElements
        - totalPages
        - page
        - size
        - elementsAmount
        - first
        - last
        - empty

    ErrorRs:
      type: object
      description: Generic error response
      properties:
        errorCode:
          type: integer
        errorDescription:
          type: string
        errorDate:
          type: string
          format: datetime
      required:
        - errorCode
        - errorDescription
        - errorDate

    ValidationErrorRs:
      type: object
      description: Response containing validation errors
      properties:
        violations:
          type: array
          items:
            $ref: '#/components/schemas/FieldViolationRs'
      required:
        - violations

    FieldViolationRs:
      type: object
      description: Response containing a single field violation information
      properties:
        fieldName:
          type: string
          description: Field name
        message:
          type: string
          description: Violation message
      required:
        - fieldName
        - message